//get all this weeks articles, add them to the database if they don't exist
//Make a summary of the articles with chatgpt
//if the article is too long, split it into multiple articles of 1000 characters
import moment from 'moment';
import {
  addArticleToCategory,
  getArticleBySlug,
  getCategories,
  getRSSArticlesByWeek,
  saveArticle
} from "../controllers/articlesController.js";
import {summarizeArrayOfTexts, summarizeTextChunks} from "./gptCalls.js";

//get week number of the current date
const week = moment().format('W');

const newArticleSummary = {
  slug: 'weekly-summary-of-the-week-' + week,
  title: 'Weekly summary of the week ' + week,
  description: 'This article was generated by the weekly summary script',
  body: '',
  img: 'rss-summary.webp',
  created_at: new Date()
}

//verify if the summary already exists
if (await getArticleBySlug(newArticleSummary.slug)) {
  console.log('Summary already exists');
  process.exit();
}

//get all articles from this week
const articles = await getRSSArticlesByWeek(week);

if (!articles || articles.length === 0) {
  console.log('No articles found');
  process.exit();
}

//log number of articles found
console.log(articles.length + ' articles found');

//article chunks
let articleChunks = [];

//cut articles into 1000 characters chunks
for (let article of articles) {
  //split the article into chunks of exactly 1000 characters
  const chunks = [];

  //remove all markdown links from the article
  article.body = article.body.replace(/\[.*?\]\(.*?\)/g, '');

  let i = 0;
  while (i < article.body.length) {
    chunks.push(article.body.slice(i, i + 820));
    i += 820;
  }

  //add the chunks to the articleChunks array
  articleChunks.push(...chunks);
}

//define the size of a summary needed based on the number of chunks
const summarySize = Math.round(((4096-800) / 4) / articleChunks.length);

let articleChunksSummaries = []; //initialize the array that will contain the summaries of each chunk

//generate the summary of each chunk
for (let chunk of articleChunks) {
  console.log("Generating summary for chunk" + (articleChunks.indexOf(chunk) + 1) + "/" + articleChunks.length);
  //generate the summary
  const summary = await summarizeTextChunks(chunk, summarySize).then(summary => {
    if (!summary) {
      return 'error';
    }
    if (summary.type) {
      if (summary.type.contains('error')) {
        return 'error';
      }
    }
    return summary;
  });

  //add the summary to the chunk
  articleChunksSummaries.push(summary);
}

// last protector
// if any of the summaries are too long, troncate them to the summarySize
for (let summary of articleChunksSummaries) {
  if (summary.length > 100) {
    articleChunksSummaries[articleChunksSummaries.indexOf(summary)] = summary.slice(0, summarySize);
  }
}

//make a summary of the summaries
const mainSummary = await summarizeArrayOfTexts(articleChunksSummaries);

//add the summary to the article
newArticleSummary.body = mainSummary;

//save the summary to the database as an article with the title "Weekly summary of the week xxx"
let lastInsertedArticleId;
await saveArticle(newArticleSummary).then(result => {
  lastInsertedArticleId = result.insertId;
});
//get id of veille category
const veilleCategoryId = await getCategories().then(categories => {
  for (let category of categories) {
    if (category.name === 'veille') {
      return category.id;
    }
  }
});
//add the article to the veille category
await addArticleToCategory(lastInsertedArticleId, veilleCategoryId);

//stop the script
process.exit();